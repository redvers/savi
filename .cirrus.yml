# We use Cirrus CI to create release builds for a handful of platforms.
#
# This task pulls a version of the runtime bitcode (see RUNTIME_RELEASE_URL),
# builds the Savi compiler, and then packages it all up in a tar.gz file
# to be attached to the release in GitHub, for easy download and use.

task:
  # Don't bother running anything at all when this isn't a release tag.
  # This line can be commented out for testing the build process in a PR.
  only_if: $CIRRUS_RELEASE != ''

  environment:
    GITHUB_API_TOKEN: ENCRYPTED[5f9b960dd53fb09b34bcb26f7f8a926071f0177e0ec814e7d122db0e2184d3e913ec78d5748e27664c0fef66fde950fe]
    RUNTIME_RELEASE_URL: https://github.com/savi-lang/runtime-bitcode/releases/download/20211101
    CC: clang
    CXX: clang++

  matrix:
    # - name: x86_64-unknown-linux-gnu
    #   container:
    #     image: ubuntu:21.04
    #   environment:
    #     TRIPLE: x86_64-unknown-linux-gnu
    #     DEPS_INSTALL: "\
    #       apt-get update && \
    #       apt-get install -y --no-install-recommends \
    #         apt-transport-https ca-certificates curl clang \
    #         llvm-dev libgc-dev libevent-dev libpcre3-dev && \
    #       curl -fsSL https://crystal-lang.org/install.sh | bash"
    #     CRYSTAL_SRC_PATH: /usr/share/crystal/src
    #     CRYSTAL_STATIC_LIBS: "\
    #       /usr/lib/x86_64-linux-gnu/libgc.a \
    #       /usr/lib/x86_64-linux-gnu/libevent.a \
    #       /usr/lib/x86_64-linux-gnu/libpcre.a"
    #     # Without this next environment var, apt-get will try to ask us
    #     # interactive questions, to which we will be unable to respond...
    #     DEBIAN_FRONTEND: noninteractive

    # - name: x86_64-unknown-linux-musl
    #   environment:
    #     TRIPLE: x86_64-unknown-linux-musl
    #     DEPS_INSTALL: "\
    #       apk add --no-cache --update \
    #         alpine-sdk coreutils gcc g++ lld bash curl linux-headers clang-dev \
    #         llvm12-dev llvm12-static pcre-dev libevent-static gc-dev \
    #         zlib-static libxml2-dev \
    #         crystal shards"
    #     CRYSTAL_SRC_PATH: /usr/lib/crystal/core
    #     CRYSTAL_STATIC_LIBS: "\
    #       /usr/lib/libgc.a \
    #       /usr/lib/libevent.a \
    #       /usr/lib/libpcre.a"
    #     # For some reason clang++ is missing some c++ headers unless we
    #     # explicitly mention them in this environment variable here.
    #     CPLUS_INCLUDE_PATH: /usr/include/c++/10.3.1:/usr/include/c++/10.3.1/x86_64-alpine-linux-musl
    #     LIBRARY_PATH: /usr/lib/gcc/x86_64-alpine-linux-musl/10.3.1
    #   container:
    #     image: alpine:edge # TODO: use alpine:3.15 or newest stable release when available

    # # TODO: Enable FreeBSD after getting it working:
    # - name: x86_64-unknown-freebsd
    #   environment:
    #     TRIPLE: x86_64-unknown-freebsd
    #     DEPS_INSTALL: "
    #       echo 'FreeBSD:{url:"pkg+http://pkg.FreeBSD.org/${ABI}/latest"}' \
    #         > /usr/local/etc/pkg/repos/FreeBSD.conf && \
    #       pkg update && \
    #       pkg install -y libunwind bash curl llvm-devel crystal shards && \
    #       ln -s /usr/local/bin/llvm-config-devel /usr/bin/llvm-config"
    #     CRYSTAL_SRC_PATH: /usr/local/lib/crystal
    #     CRYSTAL_STATIC_LIBS: TODO
    #   freebsd_instance:
    #     image: freebsd-13-0-release-amd64

    # - name: x86_64-apple-macosx
    #   environment:
    #     TRIPLE: x86_64-apple-macosx
    #     DEPS_INSTALL: "\
    #       brew update --preinstall && brew install llvm libiconv crystal"
    #     CRYSTAL_SRC_PATH: /usr/local/opt/crystal/src
    #     CRYSTAL_STATIC_LIBS: "\
    #       /usr/local/lib/libgc.a \
    #       /usr/local/lib/libevent.a \
    #       /usr/local/lib/libpcre.a \
    #       -liconv" # (this last one is not static - couldn't get static to work)
    #     # Ensure that installed LLVM and clang binaries overshadow system ones.
    #     PATH: /usr/local/opt/llvm/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
    #     # Set up the SDKROOT path specific to the present XCode version.
    #     # TODO: Figure out how to make this not dependent on the XCode version?
    #     SDKROOT: /Applications/Xcode-12.5.0.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk
    #   macos_instance:
    #     image: big-sur-xcode-12.5

    - name: arm64-apple-macosx
      environment:
        TRIPLE: arm64-apple-macosx
        DEPS_INSTALL: "\
          brew update --preinstall && brew install llvm crystal"
        CRYSTAL_SRC_PATH: /usr/local/opt/crystal/src
        CRYSTAL_STATIC_LIBS: "\
          /usr/local/lib/libgc.a \
          /usr/local/lib/libevent.a \
          /usr/local/lib/libpcre.a \
          -liconv" # (this last one is not static - couldn't get static to work)
        # Since we're cross compiling, we need to build LLVM from source.
        LLVM_SOURCE_URL: https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.1/llvm-project-12.0.1.src.tar.xz
        # Set up the SDKROOT path specific to the present XCode version.
        # TODO: Figure out how to make this not dependent on the XCode version?
        SDKROOT: /Applications/Xcode-12.5.0.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk
      macos_instance:
        image: big-sur-xcode-12.5

    # TODO: arm64-apple-macos

  os_info_script:
    - uname
    - uname -m
    - uname -a

  llvm_cache:
    folder: build_llvm
    fingerprint_script: echo "${LLVM_SOURCE_URL} ${TRIPLE}"
    populate_script: "
      curl -L --fail "${LLVM_SOURCE_URL}" --output /tmp/llvm.tar.xz && \
      mkdir -p build_llvm && cd build_llvm && \
      tar -xvf /tmp/llvm.tar.xz --strip-components=1 && \
      mkdir -p build && cd build && \
      cmake .. && \
      echo && \
      echo DONE"
  upload_caches:
    - llvm

  deps_script:
    - echo "${DEPS_INSTALL}"
    - sh -c "${DEPS_INSTALL}"

  download_runtime_script:
    - mkdir -p out/lib
    - curl -L --fail "${RUNTIME_RELEASE_URL}/${TRIPLE}-libponyrt.bc" --output out/lib/libsavi_runtime.bc

  build_script:
    - mkdir -p out/bin

    - crystal --version
    - llvm-config --version
    - clang --version

    # Build the Crystal LLVM extensions, emitting as bitcode so we can optimize.
    - >-
      clang++ -v -emit-llvm -c `llvm-config --cxxflags` \
        ${CRYSTAL_SRC_PATH}/llvm/ext/llvm_ext.cc \
        -o ${CRYSTAL_SRC_PATH}/llvm/ext/llvm_ext.bc

    # Build the Savi compiler as an object file, for the given target triple.
    # Even if we're not cross compiling, we tell Crystal we are so that it
    # doesn't try to eagerly link our object file into a binary.
    # We want to control the linking process in a custom way ourselves.
    - >-
      env SAVI_VERSION=${CIRRUS_TAG:-unknown} \
        crystal build main.cr -o /tmp/savi --stats --error-trace --release \
          --cross-compile --target=${TRIPLE}

    # Whittle down the Crystal LLVM extensions to remove what we don't use,
    # mainly because every function we don't use needlessly adds to our usage
    # surface of LLVM, making it more likely to break across LLVM versions.
    - echo `strings /tmp/savi.o | grep LLVMExt | tr '\n' ','`
    - >-
      opt -globaldce -O2 \
        -internalize \
        -internalize-public-api-list="LLVMExtBuildCall2,LLVMExtBuildInvoke2,LLVMExtDIBuilderCreateAutoVariable,LLVMExtDIBuilderCreateBasicType,LLVMExtDIBuilderCreateCompileUnit,LLVMExtDIBuilderCreateEnumerationType,LLVMExtDIBuilderCreateEnumerator,LLVMExtDIBuilderCreateExpression,LLVMExtDIBuilderCreateFile,LLVMExtDIBuilderCreateFunction,LLVMExtDIBuilderCreateMemberType,LLVMExtDIBuilderCreatePointerType,LLVMExtDIBuilderCreateReplaceableCompositeType,LLVMExtDIBuilderCreateStructType,LLVMExtDIBuilderCreateSubroutineType,LLVMExtDIBuilderFinalize,LLVMExtDIBuilderGetOrCreateArray,LLVMExtDIBuilderGetOrCreateTypeArray,LLVMExtDIBuilderInsertDeclareAtEnd,LLVMExtDIBuilderReplaceTemporary,LLVMExtNewDIBuilder,LLVMExtNormalizeTargetTriple,LLVMExtSetCurrentDebugLocation," \
        < ${CRYSTAL_SRC_PATH}/llvm/ext/llvm_ext.bc \
        > /tmp/llvm_ext-opt.bc

    # Finally, link all the pieces together, including static libraries
    # for the main Crystal-runtime dependencies, to make the compiler
    # as portable as possible across different distros/circumstances
    # (not requiring shared libraries to be installed with particular names).
    - >-
      clang -v -o out/bin/savi /tmp/savi.o /tmp/llvm_ext-opt.bc \
        ${CRYSTAL_STATIC_LIBS} \
        -lstdc++ \
        `llvm-config --libfiles --link-static` \
        `llvm-config --system-libs --link-static`

  copy_packages_script:
    - mkdir -p out
    - cp -r packages out/packages

  archive_script:
    - tar -czvf /tmp/savi.tar.gz -C out .

  publish_if_release_script:
    - >-
      sh -c '
        test -z "${CIRRUS_RELEASE}" || \
          curl -v --fail -X POST \
            -H "Authorization: token ${GITHUB_API_TOKEN}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @/tmp/savi.tar.gz \
            "https://uploads.github.com/repos/$CIRRUS_REPO_FULL_NAME/releases/$CIRRUS_RELEASE/assets?name=${TRIPLE}-savi.tar.gz" \
      '
